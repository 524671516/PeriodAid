@model PeriodAid.Models.SP_OrderPrice
@Html.AntiForgeryToken()
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
<td class="hidden">
    <input id="OrderId" name="Order_Id" value="@ViewBag.OrderPrice.Order_Id" />
    @Html.ValidationMessageFor(model => model.Order_Id, "", new { @class = "text-danger" })
</td>
<td>
    @ViewBag.OrderPrice.SP_Product.Item_Name
    @Html.EditorFor(model => model.Product_Id, new { htmlAttributes = new { @class = "hidden" } })
    @Html.ValidationMessageFor(model => model.Product_Id, "", new { @class = "text-danger" })
</td>
<td>
    @Html.EditorFor(model => model.Order_Price, new { htmlAttributes = new { @class = "price-form-control", @autocomplete = "off" } })
    @Html.ValidationMessageFor(model => model.Order_Price, "", new { @class = "text-danger" })
</td>
<td>
    @Html.EditorFor(model => model.Order_Count, new { htmlAttributes = new { @class = "price-form-control", @autocomplete = "off" } })
    @Html.ValidationMessageFor(model => model.Order_Count, "", new { @class = "text-danger" })
</td>
<td>
    @ViewBag.OrderPrice.Order_Count
</td>
<td>
    @Math.Round(ViewBag.OrderPrice.Order_Count / (double)ViewBag.OrderPrice.SP_Product.Carton_Spec)
</td>
<td>
    @Math.Round((ViewBag.OrderPrice.Order_Price * ViewBag.OrderPrice.Order_Count), 2)
</td>
<td>
    @Html.EditorFor(model => model.OrderPrice_Discount, new { htmlAttributes = new { @class = "price-form-control", @autocomplete = "off" } })
    @Html.ValidationMessageFor(model => model.OrderPrice_Discount, "", new { @class = "text-danger" })
</td>
<td>
    @Html.EditorFor(model => model.OrderPrice_Remark, new { htmlAttributes = new { @class = "price-form-control", @autocomplete = "off" } })
    @Html.ValidationMessageFor(model => model.OrderPrice_Remark, "", new { @class = "text-danger" })
</td>
<td>
    <a class="btn btn-xs btn-success" id="save-btn" role="button">确定</a>
    <a class="btn btn-xs btn-primary" id="back-btn" role="button">返回</a>
</td>


